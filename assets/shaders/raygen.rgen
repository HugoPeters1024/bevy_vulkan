#version 460
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "types.glsl"
#include "rand.glsl"
#include "common.glsl"
#include "disney.glsl"

layout(set=0, binding=0, rgba32f) uniform restrict image2D render_target;
layout(set=0, binding=100)        uniform accelerationStructureEXT topLevelAS;
layout(set=1, binding=200)        uniform sampler2D textures[];

layout(push_constant, std430) uniform Registers {
  PushConstants pc;
};

layout(location = 0) rayPayloadEXT HitPayload payload;

const bool ENABLE_BLUENOISE = true;
const uint SAMPLES = 1;
const uint MAX_BOUNCES = 64;

const float g_extinction = 0.03;

float sampleDistanceInFog() {
  return -log(randf()) / pc.uniforms.foginess;
}

float calcFogTransmittance(float distance) {
  return exp(-g_extinction * distance);
}

vec3 sampleFogScatterDirection(vec3 incoming) {
  // Henyey-Greenstein phase function sampling
  // g is the asymmetry parameter (-1 <= g <= 1)
  // g > 0 means forward scattering
  // g < 0 means backward scattering
  // g = 0 means isotropic scattering

  const float g = pc.uniforms.fog_scatter;
  float cosTheta;
  if (g == 0.0) {
    // isotropic
    cosTheta = 1.0 - 2.0 * randf();
  } else {
    // anisotropic
    float term = (1.0 - g * g) / (1.0 + g * (2.0 * randf() - 1.0));
    cosTheta = (1.0 + g * g - term * term) / (2.0 * g);
  }

  float sinTheta = sqrt(max(0.0, 1.0 - cosTheta * cosTheta));
  float phi = 2.0 * PI * randf();

  vec3 ret = vec3(sinTheta * cos(phi), sinTheta * sin(phi), cosTheta);
  return orthonormalBasis(incoming) * ret;
}

// Extracts either the first two or second two bytes from the uint
// encoded byte buffer. As a result, byteIndex must be an even number
// for this to work.
vec2 TwoBnoiseSamples(const uint byteIndex) {
  const uint uintIndex = byteIndex / 4;
  const uint packedUInt = pc.bluenoise.bluenoise[uintIndex];

  // Calculate the shift amount based on the byte index modulo 4
  const uint shiftAmount = (byteIndex % 4) * 8;

  // Extract the two bytes at positions byteIndex and byteIndex+1 (next byte)
  uvec2 res = uvec2((packedUInt >> shiftAmount), (packedUInt >> (shiftAmount + 8)));

  return vec2((res.x & 0xFF) / 255.0, (res.y & 0xFF) / 255.0);
}

// TODO: this state is not carried over to the next frame :(
vec2 bnoiseBest(const uint sampleIdx) {
  const uint textureIdx = pc.uniforms.tick * SAMPLES + sampleIdx;
  if (textureIdx >= 64) { return vec2(randf(), randf()); }
  const uint x = gl_LaunchIDEXT.x % 128;
  const uint y = gl_LaunchIDEXT.y % 128;
  uint byteIndex = 128 * 128 * 2 * textureIdx + 128 * 2 * y + 2 * x;
  return TwoBnoiseSamples(byteIndex);
}

void main() {
  initRandom(gl_LaunchSizeEXT.xy, gl_LaunchIDEXT.xy, pc.uniforms.tick);

  // wide screen
  if (float(gl_LaunchIDEXT.y) < gl_LaunchSizeEXT.y * 0.1 || float(gl_LaunchIDEXT.y) > gl_LaunchSizeEXT.y * 0.9) {
    imageStore(render_target, ivec2(gl_LaunchIDEXT.xy), vec4(0.0));
    return;
  }

  const float tmin = 0.0001;
  const float tmax = 1000.0;

  const vec2 pixel_center = vec2(gl_LaunchIDEXT.x, gl_LaunchSizeEXT.y - gl_LaunchIDEXT.y) + vec2(randf(), randf());
  const vec2 inUV = pixel_center / vec2(gl_LaunchSizeEXT.xy);
  const vec2 d = inUV * 2.0 - 1.0;


  const vec3 initial_origin = (pc.uniforms.inverse_view * vec4(0,0,0,1)).xyz;
  const vec3 target = (pc.uniforms.inverse_projection * vec4(d, 1, 1)).xyz;
  const vec3 initial_direction = (pc.uniforms.inverse_view * vec4(normalize(target), 0)).xyz;
  const vec3 focalPoint = initial_origin + initial_direction * pc.focus.focal_distance;

  if (pc.uniforms.pull_focus_x == gl_LaunchIDEXT.x && pc.uniforms.pull_focus_y == gl_LaunchIDEXT.y) {
    traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, initial_origin, tmin, initial_direction, tmax, 0);
    if (payload.t != 0.0) {
      pc.focus.focal_distance = payload.t;
    }
  }

  vec3 acc = vec3(0.0);

  for (uint sample_idx = 0; sample_idx < SAMPLES; sample_idx += 1) {
    const float offsetR = sqrt(randf());
    const float offsetA = randf() * 2.0f * PI;
    const vec2 offset = pc.uniforms.aperture * vec2(offsetR * cos(offsetA), offsetR * sin(offsetA));

    vec3 origin = (pc.uniforms.inverse_view * vec4(offset, 0, 1)).xyz;
    vec3 direction = normalize(focalPoint - origin);
    vec3 mask = vec3(1.0);

    for (uint bounce_idx = 0; bounce_idx < MAX_BOUNCES; bounce_idx += 1) {
      traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, origin, tmin, direction, tmax, 0);

      const vec3 surface_normal = oct_to_float32x3(payload.surface_and_world_normal.xy);
      const vec3 world_normal = oct_to_float32x3(payload.surface_and_world_normal.zw);
      const float roughness = hitPayloadGetRoughness(payload);
      const float metallic = hitPayloadGetMetallic(payload);
      const float transmission = hitPayloadGetTransmission(payload);
      const bool inside = hitPayloadGetInside(payload);

      // miss
      if (payload.t == 0.0) {
        acc += mask * payload.emission;
        break;
      }

      // fog bounce
      const float fogDistance = sampleDistanceInFog();
      if (fogDistance < payload.t) {
        origin = origin + direction * fogDistance;
        mask *= calcFogTransmittance(fogDistance);
        direction = sampleFogScatterDirection(direction);
        continue;
      }

      // hit an emitter
      if (payload.emission != vec3(0.0)) {
        acc += mask * payload.emission;
        break;
      }

      // semi translucent textures
      origin = origin + direction * payload.t;
      if (payload.color.a < 1.0 && randf() < 1-payload.color.a) { continue; }
      // pure black textures are often used as translucent masks.
      if (payload.color.rgb == vec3(0.0)) { continue; }

      // refraction (glass)
      if (randf() < transmission) {
        // calculate the eta based on whether we are inside
        const float n1 = inside ? payload.refract_index : 1.0f;
        const float n2 = inside ? 1.0f : payload.refract_index;
        const float eta = n1 / n2;

        const float costi = dot(world_normal, -direction);
        const float k = 1 - (eta* eta) * (1 - costi * costi);


        float pReflect;
        if (k < 0) {
            // Total internal reflection
            pReflect = 1;
        } else {
            // fresnell equation for reflection contribution
            const float sinti = sqrt(max(0.0f, 1.0f - costi - costi));
            const float costt = sqrt(1.0f - eta * eta * sinti * sinti);
            const float spol = (n1 * costi - n2 * costt) / (n1 * costi + n2 * costt);
            const float ppol = (n1 * costt - n2 * costi) / (n1 * costt + n2 * costi);
            pReflect = 0.5f * (spol * spol + ppol * ppol);
        }

        vec3 refract_dir;
        if (randf() <= pReflect) {
            refract_dir = reflect(direction, world_normal);
        } else {
            refract_dir = normalize(eta * direction + world_normal * (eta * costi - sqrt(k)));
        }

        const mat3 basis = orthonormalBasis(world_normal);
        const vec3 sample_dir = basis * CosineSampleHemisphere(randf(), randf());
        direction = mix(refract_dir, sample_dir, roughness);
        if (inside) {
          mask *= exp(-payload.t * payload.absorption);
        }
        continue;
      }

      // russian roullete
      // stopping on the first two bounces is a waste because we haven't been able
      // to gather much light yet except those directly in view of the camera, but
      // those paths would be terminated there and then anyway because they hit
      // an emitter.
      if (bounce_idx > 1) {
        const float pRussian = clamp(luma(payload.color.rgb), 0.01, 0.9);
        if (randf() >= pRussian) { break; }
        mask /= pRussian;
      }

      const DisneyMaterial disney_mat = DisneyMaterial(
        payload.color.rgb, metallic, roughness
      );

      vec4 noise = vec4(0.0);
      if (ENABLE_BLUENOISE && bounce_idx == 0) {
        // bluenoise sampling on the first bounce
        noise = vec4(bnoiseBest(sample_idx*2+0), bnoiseBest(sample_idx*2+1));
      } else {
        noise = vec4(randf(), randf(), randf(), randf());
      }

      // stratified sampling on the first bounce
      // doing it on multiple bounces like this is invalid because
      // they will become correlated.
      if (bounce_idx == 0) {
        noise.y = noise.y / SAMPLES + sample_idx / float(SAMPLES);
        noise.w = noise.w / SAMPLES + sample_idx / float(SAMPLES);
      }

      const vec4 brdf = sampleDisneyBRDF(noise, -direction, world_normal, disney_mat, direction);

      // Prevent going into the surface (leaks light through walls)
      if (dot(direction, surface_normal) < 0) { break; }

      // Note that an 'a' value of 0 does not mean that the bounce is impossible, but rather
      // that the bounce is a pure specular bounce.
      if (brdf.a > 0.0001) {
        mask *= brdf.rgb / brdf.a;
      }
    }
  }


  vec4 prev = vec4(0.0);
  if (pc.uniforms.accumulate != 0) {
    prev = imageLoad(render_target, ivec2(gl_LaunchIDEXT.xy));
  }

  imageStore(render_target, ivec2(gl_LaunchIDEXT.xy), vec4(acc / SAMPLES, 1) + prev);
}

