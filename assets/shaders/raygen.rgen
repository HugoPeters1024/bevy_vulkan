#version 460
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

#include "types.glsl"
#include "rand.glsl"

layout(set=0, binding=0, rgba32f) uniform image2D render_target;
layout(set=0, binding=1)          uniform accelerationStructureEXT topLevelAS;

layout(push_constant, std430) uniform Registers {
  UniformData uniforms;
};

layout(location = 0) rayPayloadEXT HitPayload payload;

const uint MAX_BOUNCES = 1;

void main() {
  initRandom(gl_LaunchSizeEXT.xy, gl_LaunchIDEXT.xy, 0);

  const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy);
  const vec2 inUV = pixel_center / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  const float tmin = 0.0001;
  const float tmax = 100.0;

  vec3 origin = (uniforms.inverse_view * vec4(0,0,0,1)).xyz;
  vec3 target = (uniforms.inverse_projection * vec4(d, 1, 1)).xyz;
  vec3 direction = (uniforms.inverse_view * vec4(normalize(target), 0)).xyz;


  vec3 acc = vec3(0.0);
  vec3 mask = vec3(1.0);

  payload.t = 0.0;
  payload.emission = vec3(0.0);
  traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, origin, tmin, direction, tmax, 0);
  if (payload.t == 0.0) {
    acc = payload.emission;
  } else {
    acc = vec3(0.0);
  }

  imageStore(render_target, ivec2(gl_LaunchIDEXT.xy), vec4(acc, 1.0));
}

